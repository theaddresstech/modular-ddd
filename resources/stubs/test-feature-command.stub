<?php

declare(strict_types=1);

namespace {{ namespace }};

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Modules\{{ module }}\Application\Commands\{{ action }}{{ aggregate }}\{{ action }}{{ aggregate }}Command;
use Modules\{{ module }}\Application\Commands\{{ action }}{{ aggregate }}\{{ action }}{{ aggregate }}Handler;
use Modules\{{ module }}\Domain\Repositories\{{ aggregate }}RepositoryInterface;
use Modules\{{ module }}\Domain\ValueObjects\{{ aggregate }}Id;
use Modules\{{ module }}\Domain\Events\{{ aggregate }}{{ action }}d;
use Ramsey\Uuid\Uuid;

/**
 * {{ class }}
 *
 * Feature tests for {{ action }}{{ aggregate }}Command execution.
 * Tests complete command flow including validation, execution, and side effects.
 */
final class {{ class }} extends TestCase
{
    use RefreshDatabase;

    private {{ aggregate }}RepositoryInterface $repository;
    private {{ action }}{{ aggregate }}Handler $handler;

    protected function setUp(): void
    {
        parent::setUp();

        $this->repository = $this->app->make({{ aggregate }}RepositoryInterface::class);
        $this->handler = $this->app->make({{ action }}{{ aggregate }}Handler::class);
    }

    public function test_can_execute_{{ action_lower }}_{{ aggregate_lower }}_command(): void
    {
        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ action }}{{ aggregate }}Command(
            $aggregateId,
            'test data'
        );

        $result = $this->handler->handle($command);

        $this->assertTrue($result->isSuccess());
        $this->assertEquals($aggregateId->toString(), $result->getData()['id']);

        // Verify aggregate was processed
        ${{ aggregate_lower }} = $this->repository->findById($aggregateId);
        $this->assertNotNull(${{ aggregate_lower }});
    }

    public function test_command_validation_fails_with_invalid_data(): void
    {
        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ action }}{{ aggregate }}Command(
            $aggregateId,
            '' // Invalid empty data
        );

        $result = $this->handler->handle($command);

        $this->assertFalse($result->isSuccess());
        $this->assertStringContainsString('validation', strtolower($result->getError()));
    }

    public function test_command_emits_domain_events(): void
    {
        $this->expectsEvents([{{ aggregate }}{{ action }}d::class]);

        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ action }}{{ aggregate }}Command(
            $aggregateId,
            'test data'
        );

        $this->handler->handle($command);
    }

    public function test_command_handles_business_rule_violations(): void
    {
        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ action }}{{ aggregate }}Command(
            $aggregateId,
            'invalid-data-format'
        );

        $result = $this->handler->handle($command);

        $this->assertFalse($result->isSuccess());
        $this->assertStringContainsString('business rule', strtolower($result->getError()));
    }

    public function test_command_handles_repository_failures(): void
    {
        // Mock repository to simulate failure
        $mockRepository = $this->createMock({{ aggregate }}RepositoryInterface::class);
        $mockRepository->method('save')
            ->willThrowException(new \RuntimeException('Repository error'));

        $this->app->instance({{ aggregate }}RepositoryInterface::class, $mockRepository);
        $handler = $this->app->make({{ action }}{{ aggregate }}Handler::class);

        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ action }}{{ aggregate }}Command(
            $aggregateId,
            'test data'
        );

        $result = $handler->handle($command);

        $this->assertFalse($result->isSuccess());
        $this->assertStringContainsString('Repository error', $result->getError());
    }

    public function test_command_performance_within_limits(): void
    {
        $startTime = microtime(true);

        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ action }}{{ aggregate }}Command(
            $aggregateId,
            'test data'
        );

        $this->handler->handle($command);

        $executionTime = microtime(true) - $startTime;

        // Assert command executes within 1 second
        $this->assertLessThan(1.0, $executionTime);
    }
}