<?php

declare(strict_types=1);

namespace {{ namespace }};

use Illuminate\Foundation\Testing\RefreshDatabase;
use Modules\{{ module }}\Application\Commands\{{ command }};
use Modules\{{ module }}\Application\Commands\Handlers\{{ command }}Handler;
use Modules\{{ module }}\Domain\Repositories\{{ aggregate }}RepositoryInterface;
use Modules\{{ module }}\Domain\ValueObjects\{{ aggregate }}Id;
use Modules\{{ module }}\Domain\Events\{{ event }};
use Modules\Shared\Infrastructure\Testing\FeatureTestCase;
use Ramsey\Uuid\Uuid;

/**
 * {{ class }}
 *
 * Feature tests for {{ command }} command execution.
 * Tests complete command flow including validation, execution, and side effects.
 */
final class {{ class }} extends FeatureTestCase
{
    use RefreshDatabase;

    private {{ aggregate }}RepositoryInterface $repository;
    private {{ command }}Handler $handler;

    protected function setUp(): void
    {
        parent::setUp();

        $this->repository = $this->app->make({{ aggregate }}RepositoryInterface::class);
        $this->handler = $this->app->make({{ command }}Handler::class);
    }

    public function test_can_execute_{{ command_lower }}_command(): void
    {
        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ command }}(
            $aggregateId,
            'Test {{ aggregate }}',
            'Test description'
        );

        $result = $this->handler->handle($command);

        $this->assertTrue($result->isSuccess());
        $this->assertEquals($aggregateId, $result->getData()['id']);

        // Verify aggregate was saved
        ${{ aggregate_lower }} = $this->repository->findById($aggregateId);
        $this->assertNotNull(${{ aggregate_lower }});
        $this->assertEquals('Test {{ aggregate }}', ${{ aggregate_lower }}->getName());
        $this->assertEquals('Test description', ${{ aggregate_lower }}->getDescription());
    }

    public function test_command_validation_fails_with_invalid_data(): void
    {
        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ command }}(
            $aggregateId,
            '', // Invalid empty name
            'Test description'
        );

        $result = $this->handler->handle($command);

        $this->assertFalse($result->isSuccess());
        $this->assertStringContainsString('name cannot be empty', $result->getError());
    }

    public function test_command_handles_concurrent_modification(): void
    {
        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());

        // Create initial aggregate
        $createCommand = new {{ command }}(
            $aggregateId,
            'Initial Name',
            'Initial description'
        );
        $this->handler->handle($createCommand);

        // Simulate concurrent modifications
        $command1 = new {{ command }}(
            $aggregateId,
            'First Update',
            'First description'
        );

        $command2 = new {{ command }}(
            $aggregateId,
            'Second Update',
            'Second description'
        );

        $result1 = $this->handler->handle($command1);
        $result2 = $this->handler->handle($command2);

        // One should succeed, one should handle concurrency
        $this->assertTrue($result1->isSuccess() || $result2->isSuccess());
    }

    public function test_command_emits_domain_events(): void
    {
        $this->expectsEvents([{{ event }}::class]);

        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ command }}(
            $aggregateId,
            'Test {{ aggregate }}',
            'Test description'
        );

        $this->handler->handle($command);
    }

    public function test_command_handles_business_rule_violations(): void
    {
        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ command }}(
            $aggregateId,
            'invalid-format-name',
            'Test description'
        );

        $result = $this->handler->handle($command);

        $this->assertFalse($result->isSuccess());
        $this->assertStringContainsString('business rule violation', $result->getError());
    }

    public function test_command_handles_repository_failures(): void
    {
        // Mock repository to simulate failure
        $mockRepository = $this->createMock({{ aggregate }}RepositoryInterface::class);
        $mockRepository->method('save')
            ->willThrowException(new \RuntimeException('Repository error'));

        $this->app->instance({{ aggregate }}RepositoryInterface::class, $mockRepository);
        $handler = $this->app->make({{ command }}Handler::class);

        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ command }}(
            $aggregateId,
            'Test {{ aggregate }}',
            'Test description'
        );

        $result = $handler->handle($command);

        $this->assertFalse($result->isSuccess());
        $this->assertStringContainsString('Repository error', $result->getError());
    }

    public function test_command_maintains_transaction_integrity(): void
    {
        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());

        // Create command that will fail after partial execution
        $command = new {{ command }}(
            $aggregateId,
            'Test {{ aggregate }}',
            'Test description'
        );

        // Ensure transaction rollback on failure
        try {
            $this->handler->handle($command);
        } catch (\Exception $e) {
            // Verify no partial state remains
            ${{ aggregate_lower }} = $this->repository->findById($aggregateId);
            $this->assertNull(${{ aggregate_lower }});
        }
    }

    public function test_command_respects_authorization(): void
    {
        // Test with unauthorized user
        $this->actingAs($this->createUser(['role' => 'guest']));

        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ command }}(
            $aggregateId,
            'Test {{ aggregate }}',
            'Test description'
        );

        $result = $this->handler->handle($command);

        $this->assertFalse($result->isSuccess());
        $this->assertStringContainsString('unauthorized', strtolower($result->getError()));
    }

    public function test_command_performance_within_limits(): void
    {
        $startTime = microtime(true);

        $aggregateId = {{ aggregate }}Id::fromString(Uuid::uuid4()->toString());
        $command = new {{ command }}(
            $aggregateId,
            'Test {{ aggregate }}',
            'Test description'
        );

        $this->handler->handle($command);

        $executionTime = microtime(true) - $startTime;

        // Assert command executes within 1 second
        $this->assertLessThan(1.0, $executionTime);
    }
}