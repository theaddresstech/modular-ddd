<?php

declare(strict_types=1);

namespace {{ namespace }};

use LaravelModularDDD\CQRS\Contracts\QueryHandlerInterface;
use LaravelModularDDD\CQRS\Caching\MultiTierCacheManager;
use Modules\{{ module }}\Infrastructure\ReadModels\{{ aggregate }}ReadModel;

/**
 * {{ class }}
 *
 * Handles {{ query_class }} query execution.
 * Uses multi-tier caching for performance optimization.
 */
final class {{ class }} implements QueryHandlerInterface
{
    public function __construct(
        private readonly MultiTierCacheManager $cacheManager
    ) {}

    /**
     * Handle the query
     */
    public function handle({{ query_class }} $query): mixed
    {
        // Check cache first
        if ($query->shouldCache()) {
            $cached = $this->cacheManager->get($query);
            if ($cached !== null) {
                return $cached;
            }
        }

        // Execute query
        $result = $this->executeQuery($query);

        // Cache result
        if ($query->shouldCache()) {
            $this->cacheManager->put($query, $result);
        }

        return $result;
    }

    /**
     * Execute the actual query
     */
    private function executeQuery({{ query_class }} $query): mixed
    {
        if ($query->id) {
            // Get single {{ aggregate_lower }}
            return {{ aggregate }}ReadModel::find($query->id);
        }

        // Get paginated list of {{ aggregate_lower }}s
        return {{ aggregate }}ReadModel::query()
            ->offset($query->offset)
            ->limit($query->limit)
            ->get();
    }

    /**
     * Get handled query type
     */
    public function getHandledQueryType(): string
    {
        return {{ query_class }}::class;
    }

    /**
     * Get handler priority
     */
    public function getPriority(): int
    {
        return 0;
    }
}