<?php

declare(strict_types=1);

namespace {{ namespace }};

use LaravelModularDDD\CQRS\Contracts\CommandInterface;
{{#if aggregate}}use Modules\{{ module }}\Domain\ValueObjects\{{ aggregate }}Id;{{/if}}

/**
 * {{ class }}
 *
 * Command to {{ action }} a {{ aggregate_lower }}.
 * {{#if async}}Executes asynchronously for better performance.{{/if}}
 * {{#if with_authorization}}Includes authorization checks.{{/if}}
 */
final class {{ class }} implements CommandInterface
{
    {{#each properties}}
    public readonly {{ type }} ${{ name }};
    {{/each}}

    public function __construct(
        {{#each properties}}
        {{ type }} ${{ name }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        {{#each properties}}
        $this->{{ name }} = ${{ name }};
        {{/each}}
    }

    /**
     * Get command name for routing
     */
    public function getCommandName(): string
    {
        return '{{ module }}.{{ command }}';
    }

    /**
     * Get command ID for tracking
     */
    public function getCommandId(): string
    {
        return uniqid('cmd_', true);
    }

    {{#if async}}
    /**
     * Should execute asynchronously
     */
    public function isAsync(): bool
    {
        return true;
    }
    {{/if}}

    {{#if with_authorization}}
    /**
     * Get required permissions
     */
    public function getRequiredPermissions(): array
    {
        return ['{{ module }}.{{ aggregate_lower }}.{{ action }}'];
    }
    {{/if}}

    /**
     * Get validation rules
     */
    public function rules(): array
    {
        return [
            {{#each properties}}
            '{{ name }}' => '{{ rules }}',
            {{/each}}
        ];
    }

    /**
     * Get command metadata
     */
    public function getMetadata(): array
    {
        return [
            'aggregate' => '{{ aggregate }}',
            'action' => '{{ action }}',
            'module' => '{{ module }}',
            {{#if async}}'async' => true,{{/if}}
            {{#if with_authorization}}'requires_auth' => true,{{/if}}
        ];
    }

    /**
     * Get command priority (lower number = higher priority)
     */
    public function getPriority(): int
    {
        return 50;
    }

    /**
     * Should retry on failure
     */
    public function shouldRetry(): bool
    {
        return {{ action }} !== 'delete';
    }

    /**
     * Maximum retry attempts
     */
    public function getMaxRetries(): int
    {
        return 3;
    }
}