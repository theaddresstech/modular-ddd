<?php

declare(strict_types=1);

namespace {{ namespace }};

use LaravelModularDDD\CQRS\Contracts\CommandInterface;
use Modules\{{ module }}\Domain\ValueObjects\{{ aggregate }}Id;

/**
 * {{ class }}
 *
 * Command to {{ action }} a {{ aggregate_lower }}.
 * Contains all necessary data for the operation.
 */
final class {{ class }} implements CommandInterface
{
    public function __construct(
        public readonly {{ aggregate }}Id ${{ aggregate_lower }}Id,
        public readonly string $data = '',
    ) {
    }

    /**
     * Get command name for routing
     */
    public function getCommandName(): string
    {
        return '{{ module }}.{{ aggregate_lower }}.{{ action }}';
    }

    /**
     * Get command ID for tracking
     */
    public function getCommandId(): string
    {
        return uniqid('cmd_', true);
    }

    /**
     * Get command validation rules
     */
    public function getValidationRules(): array
    {
        return [
            '{{ aggregate_lower }}_id' => 'required|string',
            'data' => 'nullable|string',
        ];
    }

    /**
     * Get command metadata
     */
    public function getMetadata(): array
    {
        return [
            'aggregate' => '{{ aggregate }}',
            'action' => '{{ action }}',
            'module' => '{{ module }}',
            'async' => false,
        ];
    }

    /**
     * Get command priority (lower number = higher priority)
     */
    public function getPriority(): int
    {
        return 50;
    }

    /**
     * Should retry on failure
     */
    public function shouldRetry(): bool
    {
        return '{{ action }}' !== 'delete';
    }

    /**
     * Maximum retry attempts
     */
    public function getMaxRetries(): int
    {
        return 3;
    }

    /**
     * Get command timeout in seconds
     */
    public function getTimeout(): int
    {
        return 30;
    }

    /**
     * Convert command to array for serialization
     */
    public function toArray(): array
    {
        return [
            'command_class' => static::class,
            'command_id' => $this->getCommandId(),
            'command_name' => $this->getCommandName(),
            '{{ aggregate_lower }}_id' => $this->{{ aggregate_lower }}Id->toString(),
            'data' => $this->data,
            'metadata' => $this->getMetadata(),
            'priority' => $this->getPriority(),
            'timeout' => $this->getTimeout(),
            'should_retry' => $this->shouldRetry(),
            'max_retries' => $this->getMaxRetries(),
        ];
    }
}