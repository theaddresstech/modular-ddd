<?php

declare(strict_types=1);

namespace {{ namespace }};

use Illuminate\Foundation\Http\FormRequest;

/**
 * {{ class }}
 *
 * Form request for {{ type }}ing {{ aggregate }} data.
 * Provides validation rules and authorization logic.
 */
final class {{ class }} extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request
     */
    public function authorize(): bool
    {
        // Add authorization logic here
        return true;
    }

    /**
     * Get the validation rules that apply to the request
     */
    public function rules(): array
    {
        return [
            'name' => 'required|string|max:255',
            'description' => 'nullable|string|max:1000',
            'status' => 'nullable|string|in:active,inactive',
        ];
    }

    /**
     * Get custom messages for validator errors
     */
    public function messages(): array
    {
        return [
            'name.required' => 'The {{ aggregate_lower }} name is required.',
            'name.string' => 'The {{ aggregate_lower }} name must be a string.',
            'name.max' => 'The {{ aggregate_lower }} name must not exceed 255 characters.',
            'description.string' => 'The description must be a string.',
            'description.max' => 'The description must not exceed 1000 characters.',
            'status.in' => 'The status must be either active or inactive.',
        ];
    }

    /**
     * Get custom attributes for validator errors
     */
    public function attributes(): array
    {
        return [
            'name' => '{{ aggregate_lower }} name',
            'description' => 'description',
            'status' => 'status',
        ];
    }

    /**
     * Configure the validator instance
     */
    public function withValidator($validator): void
    {
        $validator->after(function ($validator) {
            // Add custom validation logic here
            if ($this->input('name') && strlen($this->input('name')) < 2) {
                $validator->errors()->add('name', 'The {{ aggregate_lower }} name must be at least 2 characters.');
            }
        });
    }

    /**
     * Get validated data with transformations
     */
    public function validated($key = null, $default = null)
    {
        $validated = parent::validated($key, $default);

        // Transform data if needed
        if (isset($validated['name'])) {
            $validated['name'] = trim($validated['name']);
        }

        return $validated;
    }
}