name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  tests:
    name: Tests (PHP ${{ matrix.php-version }}, Laravel ${{ matrix.laravel-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
        laravel-version: [10.x, 11.x]
        include:
          - laravel-version: 10.x
            testbench-version: 8.x
          - laravel-version: 11.x
            testbench-version: 9.x

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_ddd_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: laravel_ddd_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, pdo_mysql, pdo_pgsql, bcmath, soap, intl, gd, exif, iconv, imagick, redis
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: dependencies-laravel-${{ matrix.laravel-version }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('composer.json') }}

      - name: Install dependencies
        run: |
          composer require "laravel/framework:${{ matrix.laravel-version }}" "orchestra/testbench:${{ matrix.testbench-version }}" --no-interaction --no-update
          composer install --prefer-dist --no-interaction

      - name: Setup Laravel application
        run: |
          cp tests/Support/.env.ci .env
          php vendor/bin/testbench package:install --interaction=false

      - name: Run PHP CS Fixer (dry run)
        run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --memory-limit=2G

      - name: Run Unit Tests
        run: vendor/bin/phpunit --testsuite=Unit --coverage-clover=coverage-unit.xml

      - name: Run Feature Tests
        run: vendor/bin/phpunit --testsuite=Feature --coverage-clover=coverage-feature.xml

      - name: Run Integration Tests
        run: vendor/bin/phpunit --testsuite=Integration --coverage-clover=coverage-integration.xml
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel_ddd_test
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

      - name: Run PostgreSQL Tests
        run: vendor/bin/phpunit --testsuite=Integration --coverage-clover=coverage-postgres.xml
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: laravel_ddd_test
          DB_USERNAME: postgres
          DB_PASSWORD: password

      - name: Merge Coverage Reports
        run: |
          vendor/bin/phpcov merge --clover coverage.xml coverage-unit.xml coverage-feature.xml coverage-integration.xml coverage-postgres.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: tests

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_ddd_performance
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, pdo_mysql, bcmath, soap, intl, gd, exif, iconv, redis

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Setup test database
        run: |
          cp tests/Support/.env.performance .env
          php vendor/bin/testbench package:install --interaction=false

      - name: Run Performance Benchmarks
        run: |
          php artisan benchmark:event-store --iterations=1000 --warmup=100
          php artisan benchmark:cqrs --iterations=500 --warmup=50
          php artisan benchmark:modules --iterations=200 --warmup=20

      - name: Run Stress Tests
        run: |
          php artisan stress:event-sourcing --concurrent=10 --duration=60
          php artisan stress:cqrs --concurrent=5 --duration=30
          php artisan stress:modules --concurrent=3 --duration=20

      - name: Generate Performance Report
        run: php artisan performance:report --format=markdown --output=performance-report.md

      - name: Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.md

  security:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Run Security Audit
        run: composer audit --format=table

      - name: Run Psalm Security Analysis
        run: vendor/bin/psalm --taint-analysis --report=psalm-security.json
        continue-on-error: true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: psalm-security.json
        if: always()

  compatibility:
    name: Compatibility Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: dom, curl, libxml, mbstring, zip

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Check PHP Compatibility
        run: vendor/bin/phpcs --standard=PHPCompatibility --runtime-set testVersion ${{ matrix.php-version }}- src/

      - name: Run Rector (dry-run)
        run: vendor/bin/rector process --dry-run --no-progress-bar

  documentation:
    name: Documentation Generation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: dom, curl, libxml, mbstring, zip

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Generate API Documentation
        run: |
          vendor/bin/phpDocumentor -d src/ -t docs/api/
          php artisan docs:generate --output=docs/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
        if: github.ref == 'refs/heads/main'

  release:
    name: Release Management
    runs-on: ubuntu-latest
    needs: [tests, performance, security, compatibility]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMPOSER_TOKEN: ${{ secrets.COMPOSER_TOKEN }}
        run: semantic-release

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [tests, performance, security, compatibility]
    if: always()

    steps:
      - name: Notify on Success
        if: ${{ needs.tests.result == 'success' && needs.performance.result == 'success' && needs.security.result == 'success' && needs.compatibility.result == 'success' }}
        run: |
          echo "✅ All CI/CD checks passed successfully!"
          echo "Package is ready for production deployment."

      - name: Notify on Failure
        if: ${{ needs.tests.result == 'failure' || needs.performance.result == 'failure' || needs.security.result == 'failure' || needs.compatibility.result == 'failure' }}
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Please check the failed jobs and fix the issues."
          exit 1